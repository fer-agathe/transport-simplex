transport_f_x <- transport_x_clr
} else {
transport_f_x <- transport_x_ilr
}
transported <- map(
1:nrow(newdata),
~{
transp_val <- transport_f_x(
x = newdata[.x, ],  n_interp = n_interp, A = A, m0 = m0, m1 = m1
)
colnames(transp_val) <- colnames(newdata)
as_tibble(transp_val)
}
)
if (n_interp == 1) {
transported_val <- transported |> list_rbind()
interpolated <- NULL
} else {
transported_val <- map(transported, ~slice_tail(.x, n = 1)) |> list_rbind()
interpolated <- transported
}
structure(
transported_val,
interpolated = interpolated,
ot_mapping = ot_mapping
)
}
transp_val_clr_0_1 <- transport_simplex(X0 = X0, X1 = X1, n_interp = 31)
transp_val_clr_1_0 <- transport_simplex(X0 = X1, X1 = X0, n_interp = 31)
#| code-fold: true
#| code-summary: Code to create the Figure.
#| fig-cap: Counterfactuals using the clr transformation and Gaussian optimal transports, $\mu_{\textcolor{red}{0}}\mapsto\mu_{\textcolor{blue}{1}}$ (left), and $\mu_{\textcolor{blue}{1}}\mapsto\mu_{\textcolor{red}{0}}$ (right).
#| label: fig-ternary-clr-toydataset
# Add group
transp_val_clr_inter_0_1 <-
interpolated(transp_val_clr_0_1) |> list_rbind(names_to = "id_obs") |>
left_join(
toydataset |> filter(group == 0) |> mutate(id_obs = row_number()) |>
select(id_obs, group, colour),
by = "id_obs"
)
transp_val_clr_inter_1_0 <-
interpolated(transp_val_clr_1_0) |> list_rbind(names_to = "id_obs") |>
left_join(
toydataset |> filter(group == 1) |> mutate(id_obs = row_number()) |>
select(id_obs, group, colour),
by = "id_obs"
)
transp_val_clr_inter_both <-
transp_val_clr_inter_0_1 |> mutate(type = "from 0 to 1") |>
bind_rows(
transp_val_clr_inter_1_0 |> mutate(type = "from 1 to 0")
)
ggtern(
data = toydataset,
mapping = aes(x = A, y = C, z = B, colour = group)
) +
geom_point() +
geom_line(
data = transp_val_clr_inter_both, linewidth = .1,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = col_groups) +
facet_wrap(~type) +
theme(
tern.axis.arrow.show = TRUE,
tern.axis.arrow.sep = .13,
tern.axis.vshift = .05,
) +
theme_hidetitles()
#| code-fold: true
#| code-summary: Code to create the Figure.
#| fig-cap: Counterfactuals using the alr transformation and Gaussian optimal transports, $\mu_{\textcolor{red}{0}}\mapsto\mu_{\textcolor{blue}{1}}$ (left), and $\mu_{\textcolor{blue}{1}}\mapsto\mu_{\textcolor{red}{0}}$ (right).
#| label: fig-ternary-alr-toydataset
transp_val_alr_0_1 <- transport_simplex(X0 = X0, X1 = X1, n_interp = 31, isomorphism = "alr")
transp_val_alr_1_0 <- transport_simplex(X0 = X1, X1 = X0, n_interp = 31, isomorphism = "alr")
# Add group
transp_val_alr_inter_0_1 <-
interpolated(transp_val_alr_0_1) |> list_rbind(names_to = "id_obs") |>
left_join(
toydataset |> filter(group == 0) |> mutate(id_obs = row_number()) |>
select(id_obs, group, colour),
by = "id_obs"
)
transp_val_alr_inter_1_0 <-
interpolated(transp_val_alr_1_0) |> list_rbind(names_to = "id_obs") |>
left_join(
toydataset |> filter(group == 1) |> mutate(id_obs = row_number()) |>
select(id_obs, group, colour),
by = "id_obs"
)
transp_val_alr_inter_both <-
transp_val_alr_inter_0_1 |> mutate(type = "from 0 to 1") |>
bind_rows(
transp_val_alr_inter_1_0 |> mutate(type = "from 1 to 0")
)
ggtern(
data = toydataset,
mapping = aes(x = A, y = C, z = B, colour = group)
) +
geom_point() +
geom_line(
data = transp_val_alr_inter_both, linewidth = .1,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = col_groups) +
facet_wrap(~type) +
theme(
tern.axis.arrow.show = TRUE,
tern.axis.arrow.sep = .13,
tern.axis.vshift = .05,
) +
theme_hidetitles()
#| code-fold: true
#| code-summary: Code to create the Figure.
#| fig-cap: Counterfactuals using the ilr transformation and Gaussian optimal transports, $\mu_{\textcolor{red}{0}}\mapsto\mu_{\textcolor{blue}{1}}$ (left), and $\mu_{\textcolor{blue}{1}}\mapsto\mu_{\textcolor{red}{0}}$ (right).
#| label: fig-ternary-ilr-toydataset
transp_val_ilr_0_1 <- transport_simplex(X0 = X0, X1 = X1, n_interp = 31, isomorphism = "ilr")
transp_val_ilr_0_1 <- transport_simplex(X0 = X1, X1 = X0, n_interp = 31, isomorphism = "ilr")
# Add group
transp_val_ilr_inter_0_1 <-
interpolated(transp_val_ilr_0_1) |> list_rbind(names_to = "id_obs") |>
left_join(
toydataset |> filter(group == 0) |> mutate(id_obs = row_number()) |>
select(id_obs, group, colour),
by = "id_obs"
)
transp_val_ilr_inter_1_0 <-
interpolated(transp_val_ilr_0_1) |> list_rbind(names_to = "id_obs") |>
left_join(
toydataset |> filter(group == 1) |> mutate(id_obs = row_number()) |>
select(id_obs, group, colour),
by = "id_obs"
)
transp_val_ilr_inter_both <-
transp_val_ilr_inter_0_1 |> mutate(type = "from 0 to 1") |>
bind_rows(
transp_val_ilr_inter_1_0 |> mutate(type = "from 1 to 0")
)
ggtern(
data = toydataset,
mapping = aes(x = A, y = C, z = B, colour = group)
) +
geom_point() +
geom_line(
data = transp_val_ilr_inter_both, linewidth = .1,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = col_groups) +
facet_wrap(~type) +
theme(
tern.axis.arrow.show = TRUE,
tern.axis.arrow.sep = .13,
tern.axis.vshift = .05,
) +
theme_hidetitles()
#| code-fold: true
#| code-summary: Codes to create the Table.
#| tbl-cap: Average value for each category in both groups, before and after transport (in %).
#| label: tbl-tbl-averages-toydataset-transport-clr
#| message: false
toydataset |>
mutate(type = "initial") |>
rename(init_group = group, init_colour = colour) |>
bind_rows(
transp_val_clr_0_1 |>
mutate(
init_group = factor(0, levels = c(0,1)),
init_colour = "red", type = "Transported: clr_0_1")
) |>
bind_rows(
transp_val_clr_1_0 |>
mutate(
init_group = factor(1, levels = c(0,1)),
init_colour = "blue", type = "Transported: clr_1_0")
) |>
mutate(
type = factor(
type, levels = c("initial", "Transported: clr_0_1",
"Transported: clr_1_0")
)
) |>
group_by(type, init_group, init_colour) |>
summarise(across(c("A", "B", "C"), ~100*mean(.x))) |>
arrange(type) |>
kableExtra::kbl(booktabs = TRUE, digits = 3) |>
kableExtra::kable_paper()
#| code-fold: true
#| code-summary: Codes to create the Figure.
#| fig-cap: Optimal transport in $\mathbb{R}^2$, on $\mathbf{z}_{\textcolor{red}{0},i}$'s and $\mathbf{z}_{\textcolor{blue}{1},i}$'s.
#| label: fig-toydataset-displacement
transported_z_0 <-
apply(Z0, MARGIN = 1, function(z) as.numeric(m1 + A %*% (z - m0))) |>
t() |>
as_tibble()
colnames(transported_z_0) <- c("V1_t", "V2_t")
transported_z_1 <-
apply(Z1, MARGIN = 1, function(z) as.numeric(m0 + A %*% (z - m1))) |>
t() |>
as_tibble()
colnames(transported_z_1) <- c("V1_t", "V2_t")
map_both <- bind_cols(transported_z_0, as_tibble(Z0)) |>
mutate(
group = factor(0, levels = c(0, 1)),
type = "group 0 to 1"
) |>
bind_rows(
bind_cols(transported_z_1, as_tibble(Z1)) |>
mutate(
group = factor(1, levels = c(0, 1)),
type = "group 1 to 0")
)
ggplot(
data = as_tibble(Z0) |> mutate(group = 0) |>
bind_rows(
as_tibble(Z1) |> mutate(group = 1)
) |>
mutate(group = factor(group)),
mapping = aes(x = V1, y = V2, colour = group)
) +
geom_point() +
geom_segment(
data = map_both,
mapping = aes(xend = V1_t, yend = V2_t)
) +
scale_colour_manual(values = col_groups) +
coord_equal(xlim = c(-1.3, 1.3)) +
labs(x = NULL, y = NULL) +
facet_wrap(~type) +
stat_ellipse()
dir_0 <- VGAM::vglm(
cbind(A,B,C)  ~ 1,
dirichlet,
data = toydataset |> filter(group == 0),
trace = TRUE, crit = "coef"
)
dir_1 <- VGAM::vglm(
cbind(A,B,C)  ~ 1,
dirichlet,
data = toydataset |> filter(group == 1),
trace = TRUE, crit = "coef"
)
VGAM::Coef(dir_0)
VGAM::Coef(dir_1)
dirichlet
VGAM::dirichlet
dir_0 <- VGAM::vglm(
cbind(A,B,C)  ~ 1,
VGAM::dirichlet,
data = toydataset |> filter(group == 0),
trace = TRUE, crit = "coef"
)
dir_1 <- VGAM::vglm(
cbind(A,B,C)  ~ 1,
VGAM::dirichlet,
data = toydataset |> filter(group == 1),
trace = TRUE, crit = "coef"
)
VGAM::Coef(dir_0)
VGAM::Coef(dir_1)
dir_0 <- VGAM::vglm(
cbind(A,B,C)  ~ 1,
VGAM::dirichlet,
data = toydataset |> filter(group == 0),
trace = FALSE, crit = "coef"
)
dir_1 <- VGAM::vglm(
cbind(A,B,C)  ~ 1,
VGAM::dirichlet,
data = toydataset |> filter(group == 1),
trace = FALSE, crit = "coef"
)
VGAM::Coef(dir_0)
VGAM::Coef(dir_1)
??contourLines
u <- (0:100) / 100
u <- u[-c(1, length(u))]
x <- expand.grid(u, u)
x <- cbind(x, w = 1 - rowSums(x))
# keep only valid points inside the simplex
x <- x[rowSums(x >= 0) == 3, ]
# Density for the Dirichlet distribution
z_0 <- VGAM::ddirichlet(x, alpha = Coef(dir_0))
z_1 <- VGAM::ddirichlet(x, alpha = Coef(dir_1))
z_0[is.infinite(z_0)] <- NA
z_1[is.infinite(z_1)] <- NA
# Matrix for contouring
mat_0 <- mat_1 <- matrix(NA, length(u), length(u))
for (i in seq_len(nrow(x))) {
iu <- which.min(abs(u - x[i, 1]))
iv <- which.min(abs(u - x[i, 2]))
mat_0[iu, iv] <- z_0[i]
mat_1[iu, iv] <- z_1[i]
}
# Extract contour lines
CL_0 <- contourLines(u, u, mat_0)
CL_1 <- contourLines(u, u, mat_1)
# Format in a data frame with ternary coordinates
contour_df_0 <- do.call(
rbind,
lapply(
seq_along(CL_0), function(i) {
L <- CL_0[[i]]
tibble(
x = L$x,
y = L$y,
z = 1 - L$x - L$y,
group_obs = i,
level = L$level
)
}
)
)
contour_df_1 <- do.call(
rbind,
lapply(
seq_along(CL_1), function(i) {
L <- CL_1[[i]]
tibble(
x = L$x,
y = L$y,
z = 1 - L$x - L$y,
group_obs = i,
level = L$level
)
}
)
)
contour_df <-
contour_df_0 |> mutate(group = "0") |>
bind_rows(contour_df_1 |> mutate(group = "1")) |>
rename(A = x, B = y, C = z)
u <- (0:100) / 100
u <- u[-c(1, length(u))]
x <- expand.grid(u, u)
x <- cbind(x, w = 1 - rowSums(x))
# keep only valid points inside the simplex
x <- x[rowSums(x >= 0) == 3, ]
# Density for the Dirichlet distribution
z_0 <- VGAM::ddirichlet(x, alpha = Coef(dir_0))
u <- (0:100) / 100
u <- u[-c(1, length(u))]
x <- expand.grid(u, u)
x <- cbind(x, w = 1 - rowSums(x))
# keep only valid points inside the simplex
x <- x[rowSums(x >= 0) == 3, ]
# Density for the Dirichlet distribution
z_0 <- gtools::ddirichlet(x, alpha = Coef(dir_0))
z_1 <- gtools::ddirichlet(x, alpha = Coef(dir_1))
z_0[is.infinite(z_0)] <- NA
z_1[is.infinite(z_1)] <- NA
# Matrix for contouring
mat_0 <- mat_1 <- matrix(NA, length(u), length(u))
for (i in seq_len(nrow(x))) {
iu <- which.min(abs(u - x[i, 1]))
iv <- which.min(abs(u - x[i, 2]))
mat_0[iu, iv] <- z_0[i]
mat_1[iu, iv] <- z_1[i]
}
# Extract contour lines
CL_0 <- contourLines(u, u, mat_0)
CL_1 <- contourLines(u, u, mat_1)
# Format in a data frame with ternary coordinates
contour_df_0 <- do.call(
rbind,
lapply(
seq_along(CL_0), function(i) {
L <- CL_0[[i]]
tibble(
x = L$x,
y = L$y,
z = 1 - L$x - L$y,
group_obs = i,
level = L$level
)
}
)
)
contour_df_1 <- do.call(
rbind,
lapply(
seq_along(CL_1), function(i) {
L <- CL_1[[i]]
tibble(
x = L$x,
y = L$y,
z = 1 - L$x - L$y,
group_obs = i,
level = L$level
)
}
)
)
contour_df <-
contour_df_0 |> mutate(group = "0") |>
bind_rows(contour_df_1 |> mutate(group = "1")) |>
rename(A = x, B = y, C = z)
??ddirichlet
u <- (0:100) / 100
u <- u[-c(1, length(u))]
x <- expand.grid(u, u)
x <- cbind(x, w = 1 - rowSums(x))
# keep only valid points inside the simplex
x <- x[rowSums(x >= 0) == 3, ]
# Density for the Dirichlet distribution
z_0 <- gtools::ddirichlet(x, alpha = VGAM::Coef(dir_0))
z_1 <- gtools::ddirichlet(x, alpha = VGAM::Coef(dir_1))
z_0[is.infinite(z_0)] <- NA
z_1[is.infinite(z_1)] <- NA
# Matrix for contouring
mat_0 <- mat_1 <- matrix(NA, length(u), length(u))
for (i in seq_len(nrow(x))) {
iu <- which.min(abs(u - x[i, 1]))
iv <- which.min(abs(u - x[i, 2]))
mat_0[iu, iv] <- z_0[i]
mat_1[iu, iv] <- z_1[i]
}
# Extract contour lines
CL_0 <- contourLines(u, u, mat_0)
CL_1 <- contourLines(u, u, mat_1)
# Format in a data frame with ternary coordinates
contour_df_0 <- do.call(
rbind,
lapply(
seq_along(CL_0), function(i) {
L <- CL_0[[i]]
tibble(
x = L$x,
y = L$y,
z = 1 - L$x - L$y,
group_obs = i,
level = L$level
)
}
)
)
contour_df_1 <- do.call(
rbind,
lapply(
seq_along(CL_1), function(i) {
L <- CL_1[[i]]
tibble(
x = L$x,
y = L$y,
z = 1 - L$x - L$y,
group_obs = i,
level = L$level
)
}
)
)
contour_df <-
contour_df_0 |> mutate(group = "0") |>
bind_rows(contour_df_1 |> mutate(group = "1")) |>
rename(A = x, B = y, C = z)
#| fig-cap: $n=61$ points in $\mathcal{S}_3$, with a toy dataset.
#| label: fig-ternary-toydataset-densities
#| warning: false
ggtern() +
# Add points
geom_point(
data = toydataset,
mapping = aes(x = A, y = C, z = B, colour = group),
size = 0.5
) +
# Add contour lines
geom_path(
data = contour_df,
mapping = aes(x = A, y = C, z = B, group = group_obs, colour = group),
linewidth = .1
) +
facet_wrap(~ group) +
scale_colour_manual(values = col_groups) +
guides(colour = "none") +
theme_light() +
theme(
strip.background = element_blank(),
strip.text = element_blank(),
text = element_text(family = font_family, size = unit(font_size, "pt")),
axis.title = element_text(size = rel(.8)),
tern.axis.arrow.show = TRUE,
tern.axis.arrow.sep = .13,
tern.axis.vshift = .05,
) +
theme_hidetitles()
#| fig-cap: $n=61$ points in $\mathcal{S}_3$, with a toy dataset.
#| label: fig-ternary-toydataset-densities
#| warning: false
ggtern() +
# Add points
geom_point(
data = toydataset,
mapping = aes(x = A, y = C, z = B, colour = group),
size = 0.5
) +
# Add contour lines
geom_path(
data = contour_df,
mapping = aes(x = A, y = C, z = B, group = group_obs, colour = group),
linewidth = .1
) +
facet_wrap(~ group) +
scale_colour_manual(values = col_groups) +
guides(colour = "none") +
theme_light() +
theme_paper() +
theme(
tern.axis.arrow.show = TRUE,
tern.axis.arrow.sep = .13,
tern.axis.vshift = .05,
) +
theme_hidetitles()
