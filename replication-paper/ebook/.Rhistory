) +
geom_point(size = .1) +
geom_line(
data = transp_all_path,
linewidth = .2, alpha = .8,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = c("Female" = "red", "Male" = "blue"), guide = "none") +
facet_wrap(~model) +
labs(x = "Married", y = "Never-married", z = "Separated") +
theme_paper() +
theme(    plot.margin = unit(c(1, 1, 1, 1), "lines"))
ggtern(
data = scores_all,
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(size = .1) +
geom_line(
data = transp_all_path,
linewidth = .2, alpha = .8,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = c("Female" = "red", "Male" = "blue"), guide = "none") +
facet_wrap(~model) +
labs(x = "Married", y = "Never-married", z = "Separated") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.9))
)
ggtern(
data = scores_all,
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(size = .1) +
geom_line(
data = transp_all_path,
linewidth = .2, alpha = .8,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = c("Female" = "red", "Male" = "blue"), guide = "none") +
facet_wrap(~model) +
labs(x = "Married", y = "Never-married", z = "Separated") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.9))
)
ggtern(
data = scores_all,
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(size = .1) +
geom_line(
data = transp_all_path,
linewidth = .2, alpha = .8,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = c("Female" = "red", "Male" = "blue"), guide = "none") +
facet_wrap(~model) +
labs(x = "Married", y = "Never-married", z = "Separated") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.9))
)
ggtern(
data = scores_all,
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(size = .1) +
geom_line(
data = transp_all_path,
linewidth = .2, alpha = .8,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = c("Female" = "red", "Male" = "blue"), guide = "none") +
facet_wrap(~model) +
labs(x = "Married", y = "Never-married", z = "Separated") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.8))
)
ggtern(
data = scores_all,
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(size = .1) +
geom_line(
data = transp_all_path,
linewidth = .2, alpha = .8,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = c("Female" = "red", "Male" = "blue"), guide = "none") +
facet_wrap(~model) +
labs(x = "Married", y = "Never-married", z = "Separated") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.8))
)
s
ggtern(
data = scores_all,
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(size = .1) +
geom_line(
data = transp_all_path,
linewidth = .2, alpha = .8,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = c("Female" = "red", "Male" = "blue"), guide = "none") +
facet_wrap(~model) +
labs(x = "Married", y = "Never-married", z = "Separated") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.8))
)
ggtern(
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(
data = tb_plot_females,
size = .1,
alpha = .6
) +
geom_point(
data = tb_plot_males,
mapping = aes(size = weights_i),
alpha = .5
) +
geom_point(data = indiv_i, size = 3, colour = "white") +
geom_point(data = indiv_i, size = 2) +
geom_point(data = cfact_indiv_i, size = 4, colour = "white", shape = 15) +
geom_point(data = cfact_indiv_i, size = 3, shape = 15) +
facet_wrap(~ model) +
labs(x = "Married", y = "Separated", z = "Never Married") +
scale_colour_manual(
values = c("Female" = "red", "Male" = "blue"), guide = "none"
) +
scale_size_continuous(range = c(0, 1), guide = "none") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.8))
)
cfact_indiv_i
mapping_rf$plan
scores_rf
X0_rf
# RF
for(i in 1:3) X0_rf[which(X0_rf[, i] == 0), i] = .0000001
for(i in 1:3) X0_rf[which(X0_rf[, i] == 1), i] = 1-.0000001
for(i in 1:3) X1_rf[which(X1_rf[, i] == 0), i] = .0000001
for(i in 1:3) X1_rf[which(X1_rf[, i] == 1), i] = 1-.0000001
# GBM
for(i in 1:3) X0_gbm[which(X0_gbm[, i] == 0), i] = .0000001
for(i in 1:3) X0_gbm[which(X0_gbm[, i] == 1), i] = 1-.0000001
for(i in 1:3) X1_gbm[which(X1_gbm[, i] == 0), i] = .0000001
for(i in 1:3) X1_gbm[which(X1_gbm[, i] == 1), i] = 1-.0000001
transp_glm_1 <- transport_simplex(X0 = X0_glm_1, X1 = X1_glm_1, n_interp = 31)
transp_glm_2 <- transport_simplex(X0 = X0_glm_2, X1 = X1_glm_2, n_interp = 31)
transp_rf <- transport_simplex(X0 = X0_rf, X1 = X1_rf, n_interp = 31)
transp_gbm <- transport_simplex(X0 = X0_rf, X1 = X1_gbm, n_interp = 31)
#| code-fold: true
#| code-summary: Optimal transport using the $\operatorname{clr}$ transformation, and Gaussian optimal transports, on the \texttt{purpose} scores in the \texttt{German Credit} database, with two logistic GAM models to predict scores, a random forest, and a boosting model. For observed values, the observed proportions of purpose categories are reported by gender. Then, for each model, the average of predicted scores by gender for each categories are shown (Composition). Lastly, the average of transported predicted scores for women are reported (Transported).
#| label: tbl-german-counterfactuals
# Proportions of each purpose level by gender in the dataset
prop_marital <-
adult |>
count(marital_status, sex) |>
group_by(sex) |>
mutate(prop = n / sum(n)) |>
select(-n) |>
pivot_wider(names_from = marital_status, values_from = prop) |>
mutate(type = "Categorical")
get_table_pred_transp <- function(scores, transp_scores) {
# Average predicted scores for each purpose level by gender
mean_scores_by_gender <-
adult_subset |>
select(marital_status, sex) |>
bind_cols(scores) |>
group_by(sex) |>
summarise(across(colnames(!!scores), ~mean(.x))) |>
mutate(type = "Composition")
# Average predicted transported score of women for each purpose level
mean_transp_scores_women <- colMeans(transp_scores) |>
as_tibble_row() |>
mutate(type = "Transported", sex = "Female -> Male")
mean_scores_by_gender |>
bind_rows(mean_transp_scores_women)
}
tb_pred_transp_mean <-
prop_marital |> mutate(model = "obs") |>
bind_rows(
get_table_pred_transp(scores_glm_1[idx, ], transp_glm_1) |>
mutate(model = "glm_1")
) |>
bind_rows(
get_table_pred_transp(scores_glm_2[idx, ], transp_glm_2) |> mutate(model = "glm_2")
) |>
bind_rows(
get_table_pred_transp(scores_rf[idx, ], transp_rf) |> mutate(model = "rf")
) |>
bind_rows(
get_table_pred_transp(scores_gbm[idx, ], transp_gbm) |> mutate(model = "gbm")
) |>
mutate(
model = factor(
model,
levels = c("obs", "glm_1", "glm_2", "rf", "gbm"),
labels = c(
"Observed Values",
"GAM-MLR(1)", "GAM-MLR(2)", "Random Forest",
"Gradient Boosting Model"
)
)
) |>
relocate(model, .before = sex) |>
relocate(type, .after = model)
tb_pred_transp_mean |> select(-model) |>
kableExtra::kbl(
booktabs = TRUE, digits = 4,
) |>
kableExtra::kable_paper() |>
kableExtra::add_header_above(c(" " = 2, "Marital Status" = 3)) |>
kableExtra::pack_rows(index = table(tb_pred_transp_mean$model))
transp_glm_1_path <- interpolated(transp_glm_1) |>
list_rbind(names_to = "id_obs")
transp_glm_2_path <- interpolated(transp_glm_2) |>
list_rbind(names_to = "id_obs")
transp_rf_path <- interpolated(transp_rf) |>
list_rbind(names_to = "id_obs")
transp_gbm_path <- interpolated(transp_gbm) |>
list_rbind(names_to = "id_obs")
#| code-fold: true
#| code-summary: Codes to create the Figure.
#| fig-cap: Optimal Transport using clr transform. Points in <span style="color:red;">red</span> are compositions for <span style="color:red;">women</span>, whereas points in <span style="color:blue;">blue</span> are compositions for <span style="color:blue;">men</span>. The lines indicate the displacement interpolation when generating counterfactuals.
#| label: fig-ternary-displacement
#| fig-height: 8
#| fig-width: 8
scores_all <- as_tibble(scores_glm_1[idx, ]) |>
mutate(sex = adult_subset$sex, model = "glm_1") |>
bind_rows(
as_tibble(scores_glm_2[idx, ]) |>
mutate(sex = adult_subset$sex, model = "glm_2")
) |>
bind_rows(
as_tibble(as.data.frame(scores_rf[idx, ])) |>
mutate(sex = adult_subset$sex, model = "rf")
) |>
bind_rows(
as_tibble(scores_gbm[idx, ]) |>
mutate(sex = adult_subset$sex, model = "gbm")
) |>
mutate(
model = factor(
model,
levels = c("obs", "glm_1", "glm_2", "rf", "gbm"),
labels = c(
"Observed Values",
"GAM-MLR(1)", "GAM-MLR(2)", "Random Forest",
"Gradient Boosting Model"
)
)
)
transp_all_path <-
transp_glm_1_path |>
mutate(
sex = factor("Female", levels = levels(adult_subset$sex)),
model = "glm_1"
) |>
bind_rows(
transp_glm_2_path |>
mutate(
sex = factor("Female", levels = levels(adult_subset$sex)),
model = "glm_2"
)
) |>
bind_rows(
transp_rf_path |>
mutate(
sex = factor("Female", levels = levels(adult_subset$sex)),
model = "rf"
)
) |>
bind_rows(
transp_gbm_path |>
mutate(
sex = factor("Female", levels = levels(adult_subset$sex)),
model = "gbm"
)
) |>
mutate(
model = factor(
model,
levels = c("obs", "glm_1", "glm_2", "rf", "gbm"),
labels = c(
"Observed Values",
"GAM-MLR(1)", "GAM-MLR(2)", "Random Forest",
"Gradient Boosting Model"
)
)
)
ggtern(
data = scores_all,
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(size = .1) +
geom_line(
data = transp_all_path,
linewidth = .2, alpha = .8,
mapping = aes(group = id_obs)
) +
scale_colour_manual(values = c("Female" = "red", "Male" = "blue"), guide = "none") +
facet_wrap(~model) +
labs(x = "Married", y = "Never-married", z = "Separated") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.8))
)
mapping_glm_1 <- wasserstein_simplex(X0_glm_1, X1_glm_1)
mapping_glm_2 <- wasserstein_simplex(X0_glm_2, X1_glm_2)
mapping_rf <- wasserstein_simplex(X0_rf, X1_rf)
mapping_gbm <- wasserstein_simplex(X0_gbm, X1_gbm)
if (!dir.exists("../output/")) dir.create("../output/", recursive = TRUE)
save(
mapping_glm_1, mapping_glm_2, mapping_rf, mapping_gbm,
file = "../output/matching_adult.rda"
)
M0_glm_1 <- mapping_glm_1$plan * nrow(X0_glm_1)
M0_glm_2 <- mapping_glm_2$plan * nrow(X0_glm_2)
M0_rf <- mapping_rf$plan * nrow(X0_rf)
M0_gbm <- mapping_gbm$plan * nrow(X0_gbm)
i <- 3
indiv_i_glm_1 <- X0_glm_1[i, ]
indiv_i_glm_2 <- X0_glm_2[i, ]
indiv_i_rf <- X0_rf[i, ]
indiv_i_gbm <- X0_gbm[i, ]
weights_i_glm_1 <- M0_glm_1[i, ]
weights_i_glm_2 <- M0_glm_2[i, ]
weights_i_rf <- M0_rf[i, ]
weights_i_gbm <- M0_gbm[i, ]
cfact_i_glm_1 <- weights_i_glm_1 %*% X1_glm_1
cfact_i_glm_2 <- weights_i_glm_2 %*% X1_glm_2
cfact_i_rf <- weights_i_rf %*% X1_rf
cfact_i_gbm <- weights_i_gbm %*% X1_gbm
#| code-fold: true
#| code-summary: Codes to create the Figure.
#| fig-cap: Empirical matching of a <span style="color:red;">woman</span> $\mathbf{x}_{0,i}^{(k)}$ (<span style="color:red;">big red dot</span>) with <span style="color:blue;">men</span> (<span style="color:blue;">blue dots</span>). The Size of blue dots are proportional to the weights $\mathbf{P}^\star_i$. The <span style="color:blue;">counterfactual</span> obtained with matching $T^\star(\mathbf{x}_{0,i})$ is shown as a <span style="color:blue;">blue square</span>.
#| label: fig-ternary-matching
#| fig-height: 8
#| fig-width: 8
#| warning: false
# Women
tb_plot_females <-
as_tibble(X0_glm_1) |>
mutate(sex = "Female", model = "glm_1") |>
bind_rows(
as_tibble(X0_glm_2) |>
mutate(sex = "Female", model = "glm_2")
) |>
bind_rows(
as_tibble(X0_rf) |>
mutate(sex = "Female", model = "rf")
) |>
bind_rows(
as_tibble(X0_gbm) |>
mutate(sex = "Female", model = "gbm",)
) |>
mutate(
model = factor(
model,
levels = c("obs", "glm_1", "glm_2", "rf", "gbm"),
labels = c(
"Observed Values",
"GAM-MLR(1)", "GAM-MLR(2)", "Random Forest",
"Gradient Boosting Model"
)
)
)
# Males individuals, with a column weights_i giving their weight used to
# construct the counterfactual for indiv i
tb_plot_males <-
as_tibble(X1_glm_1) |>
mutate(
sex = "Male", model = "glm_1", weights_i = weights_i_glm_1
) |>
bind_rows(
as_tibble(X1_glm_2) |>
mutate(
sex = "Male", model = "glm_2", weights_i = weights_i_glm_2
)
) |>
bind_rows(
as_tibble(X1_rf) |>
mutate(
sex = "Male", model = "rf", weights_i = weights_i_rf
)
) |>
bind_rows(
as_tibble(X1_gbm) |>
mutate(
sex = "Male", model = "gbm", weights_i = weights_i_rf
)
) |>
mutate(
model = factor(
model,
levels = c("obs", "glm_1", "glm_2", "rf", "gbm"),
labels = c(
"Observed Values",
"GAM-MLR(1)", "GAM-MLR(2)", "Random Forest",
"Gradient Boosting Model"
)
)
)
indiv_i <-
as_tibble_row(indiv_i_glm_1) |> mutate(sex = "Female", model = "glm_1") |>
bind_rows(
as_tibble_row(indiv_i_glm_2) |> mutate(sex = "Female", model = "glm_2")
) |>
bind_rows(
as_tibble_row(indiv_i_rf) |> mutate(sex = "Female", model = "rf")
) |>
bind_rows(
as_tibble_row(indiv_i_gbm) |> mutate(sex = "Female", model = "gbm")
) |>
mutate(
model = factor(
model,
levels = c("obs", "glm_1", "glm_2", "rf", "gbm"),
labels = c(
"Observed Values",
"GAM-MLR(1)", "GAM-MLR(2)", "Random Forest",
"Gradient Boosting Model"
)
)
)
cfact_indiv_i <-
as_tibble(cfact_i_glm_1) |> mutate(sex = "Male", model = "glm_1") |>
bind_rows(
as_tibble(cfact_i_glm_2) |> mutate(sex = "Male", model = "glm_2")
) |>
bind_rows(
as_tibble(cfact_i_rf) |> mutate(sex = "Male", model = "rf")
) |>
bind_rows(
as_tibble(cfact_i_gbm) |> mutate(sex = "Male", model = "gbm")
) |>
mutate(
model = factor(
model,
levels = c("obs", "glm_1", "glm_2", "rf", "gbm"),
labels = c(
"Observed Values",
"GAM-MLR(1)", "GAM-MLR(2)", "Random Forest",
"Gradient Boosting Model"
)
)
)
ggtern(
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(
data = tb_plot_females,
size = .1,
alpha = .6
) +
geom_point(
data = tb_plot_males,
mapping = aes(size = weights_i),
alpha = .5
) +
geom_point(data = indiv_i, size = 3, colour = "white") +
geom_point(data = indiv_i, size = 2) +
geom_point(data = cfact_indiv_i, size = 4, colour = "white", shape = 15) +
geom_point(data = cfact_indiv_i, size = 3, shape = 15) +
facet_wrap(~ model) +
labs(x = "Married", y = "Separated", z = "Never Married") +
scale_colour_manual(
values = c("Female" = "red", "Male" = "blue"), guide = "none"
) +
scale_size_continuous(range = c(0, 1), guide = "none") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.8))
)
ggtern(
mapping = aes(x = Married, y = Separated, z = `Never-married`, colour = sex)
) +
geom_point(
data = tb_plot_females,
size = .1,
alpha = .6
) +
geom_point(
data = tb_plot_males,
mapping = aes(size = weights_i),
alpha = .5
) +
geom_point(data = indiv_i, size = 3, colour = "white") +
geom_point(data = indiv_i, size = 2) +
geom_point(data = cfact_indiv_i, size = 3, colour = "white", shape = 15) +
geom_point(data = cfact_indiv_i, size = 3, shape = 15) +
facet_wrap(~ model) +
labs(x = "Married", y = "Separated", z = "Never Married") +
scale_colour_manual(
values = c("Female" = "red", "Male" = "blue"), guide = "none"
) +
scale_size_continuous(range = c(0, 1), guide = "none") +
theme_paper() +
theme(
tern.axis.title = element_text(size = rel(.8))
)
adult_subset[ind_0[i], "marital_status"]
